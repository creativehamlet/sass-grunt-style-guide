
// Circle content - sometimes paddings vary so define specific $p* parameters
@mixin circle-content($pt, $pr, $pb, $pl) {
    border-radius: 50%;
    padding-top: $pt;
    padding-right: $pr;
    padding-bottom: $pb;
    padding-left: $pl;
    line-height: 0em;
    font: $font;
    font-size: $font-size-large;
}

// Middle earth is a line going through center of another object horizantally
// TODO make vertical parameter
@mixin middle-earth($bpos, $height, $left, $valign, $vsize, $width: 100%) {
    content: '';
    position: absolute;
    border-#{$bpos}: 3px solid;
    height: $height;
    width: $width;
    transform: translateY(-50%);
    left: $left;
    #{$valign}: $vsize;
}

@mixin selection {
  ::-moz-selection {
    @content;
  }

  ::selection {
    @content;
  }
}

@mixin intrinsic($property, $value) {
  @if $value == fit-content or $value == min-content or $value == max-content {
    #{$property}: -webkit-#{$value};
    #{$property}: -moz-#{$value};
    #{$property}: $value;
  }
  @else if $value == fill-available or $value == available {
    #{$property}: -webkit-fill-available;
    #{$property}: -moz-available;
    #{$property}: fill-available;
  }
  @else {
    #{$property}: $value;
  }
}

// calculation for size
@mixin calc($property, $backup, $expression) {
  #{$property}: #{$backup};
  #{$property}: -webkit-calc(#{$expression});
  #{$property}: -moz-calc(#{$expression});
  #{$property}: calc(#{$expression});
}

// font defigned takes in two parameters to establish font
@mixin font-defined($fontName, $fontWeight) {
  font-family: $fontName;
  font-weight: $fontWeight;
}

// footer fixed
@mixin footer-fixed($footerHeight) {
  html, body {
    height: 100%;
  }

  [role="main"] {
    min-height: 100%;

    /* equal to footer height */
    margin-bottom: $footerHeight * -1px;

    &:after {
      content: '';
      display: block;
      height: $footerHeight * 1px;
    }
  }

  footer {
    height: $footerHeight * 1px;
    margin-bottom: -25px;
  }
}

@mixin border-image($url, $offsets, $repeats: repeat) {
  border-style: solid;
  border-color: white;

  @include experimental("border-image", $url $offsets $repeats, -moz, not -webkit, -o, -ms, -khtml, official);

  border-width: $offsets * 1px;
}

@mixin border-image-top($url, $offsets, $repeats: repeat) {
  // padding-top: $offsets * 1px;
  @include border-image($url, $offsets, $repeats);

  border-left: solid 0 transparent;
  border-bottom: solid 0 transparent;
  border-right: solid 0 transparent;
}

@mixin border-image-right($url, $offsets, $repeats: repeat) {
  // padding-right: $offsets * 1px;
  @include border-image($url, $offsets, $repeats);

  border-top: solid 0 transparent;
  border-left: solid 0 transparent;
  border-bottom: solid 0 transparent;
}

@mixin border-image-bottom($url, $offsets, $repeats: repeat) {
  // padding-bottom: $offsets * 1px;
  @include border-image($url, $offsets, $repeats);

  border-top: solid 0 transparent;
  border-left: solid 0 transparent;
  border-right: solid 0 transparent;
}

@mixin border-image-left($url, $offsets, $repeats: repeat) {
  // padding-left: $offsets * 1px;
  @include border-image($url, $offsets, $repeats);

  border-top: solid 0 transparent;
  border-bottom: solid 0 transparent;
  border-right: solid 0 transparent;
}

// Vertical Aligning/Centering

@mixin vertical-align {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(50%);
  -ms-transform: translateY(50%);
  transform: translateY(50%);
}
